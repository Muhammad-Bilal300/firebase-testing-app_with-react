{"version":3,"sources":["config.js","components/ChatRoom/chatroom.js","App.js","serviceWorker.js","index.js"],"names":["fire","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","ChatRoom","props","context","handleChange","e","setState","message","target","value","submitMessage","console","log","state","nextMessage","id","Date","now","text","counter","database","ref","set","messages","previousMessages","this","on","snap","push","val","currenMessage","map","i","key","type","placeholder","onChange","onClick","Component","App","className","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4RAeeA,E,OAFFC,EAASC,cAXD,CACjBC,OAAQ,GACRC,WAAY,GACZC,YAAa,GACbC,UAAW,GACXC,cAAe,GACfC,kBAAmB,GACnBC,MAAO,GACPC,cAAe,KC4EJC,E,YAjFX,WAAYC,EAAOC,GAAU,IAAD,8BACxB,4CAAMD,EAAOC,KAsCjBC,aAAe,SAACC,GACZ,EAAKC,SAAS,CACVC,QAASF,EAAEG,OAAOC,SAzCE,EA4C5BC,cAAgB,SAACL,GACbM,QAAQC,IAAI,iBAAkB,EAAKC,MAAMN,SAEzC,IAAMO,EAAc,CAChBC,GAAIC,KAAKC,MACTC,KAAM,EAAKL,MAAMN,SAErB,EAAKD,SAAS,CACVC,QAAS,GACTY,QAAS,EAAKN,MAAMM,QAAU,IAEnB7B,EAAK8B,WACXC,IAAI,YAAcP,EAAYC,IAAIO,IAAIR,IArD/C,EAAKD,MAAQ,CACTN,QAAS,GACTY,QAAS,EACTI,SAAU,GACVR,GAAGC,KAAKC,OAPY,E,kFAwBN,IAAD,OACXO,EAAmBC,KAAKZ,MAAMU,SAErBjC,EAAK8B,WACXC,IAAI,aAAaK,GAAG,eAAe,SAACC,GACzCH,EAAiBI,KAAK,CAClBb,GAAIY,EAAKE,MAAMd,GACfG,KAAMS,EAAKE,MAAMX,OAErB,EAAKZ,SAAS,CACViB,SAAUC,S,+BA6BlB,IAAMM,EAAgBL,KAAKZ,MAAMU,SAASQ,KAAI,SAACxB,EAASyB,GACpD,OACI,wBAAIC,IAAK1B,EAAQQ,IAAKR,EAAQW,KAA9B,QAGR,OACI,6BACI,4BACKY,GAEL,2BAAOI,KAAK,OAAOC,YAAY,UAAUC,SAAUX,KAAKrB,aAAcK,MAAOgB,KAAKZ,MAAMN,UACxF,6BACA,4BAAQ2B,KAAK,SAASG,QAASZ,KAAKf,eAApC,uB,GA7EO4B,aCYRC,E,iLARX,OACE,yBAAKC,UAAU,aACb,kBAAC,EAAD,W,GALUC,IAAMH,WCQJI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f7bfbac8.chunk.js","sourcesContent":["import firebase from \"firebase\";\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"\",\r\n    authDomain: \"\",\r\n    databaseURL: \"\",\r\n    projectId: \"\",\r\n    storageBucket: \"\",\r\n    messagingSenderId: \"\",\r\n    appId: \"\",\r\n    measurementId: \"\"\r\n};\r\n// Initialize Firebase\r\nconst fire = firebase.initializeApp(firebaseConfig);\r\n\r\nexport default fire;","import React, { Component } from 'react';\r\nimport fire from '../../config';\r\n\r\nclass ChatRoom extends Component {\r\n\r\n    constructor(props, context) {\r\n        super(props, context);\r\n\r\n        this.state = {\r\n            message: '',\r\n            counter: 0,\r\n            messages: [],\r\n            id:Date.now()\r\n        }\r\n    }\r\n    // componentDidMount() {\r\n    //     console.log(\"componentDidMount\");\r\n    //     var database = fire.database();\r\n    //     database.ref('Messages/').on(\"child_added\", (snapshot) => {\r\n    //         const currenMessages = snapshot.val().text;\r\n\r\n    //         if (currenMessages !== null) {\r\n    //             this.setState({\r\n    //                 messages: currenMessages\r\n    //             })\r\n    //         }\r\n    //     })\r\n    // }\r\n\r\n    componentWillMount() {\r\n        const previousMessages = this.state.messages;\r\n       \r\n        var database = fire.database();\r\n        database.ref('Messages/').on(\"child_added\", (snap) => {\r\n            previousMessages.push({\r\n                id: snap.val().id,\r\n                text: snap.val().text\r\n            })\r\n            this.setState({\r\n                messages: previousMessages\r\n            })\r\n        })\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            message: e.target.value,\r\n        })\r\n    }\r\n    submitMessage = (e) => {\r\n        console.log(\"SubmitMessage:\", this.state.message);\r\n\r\n        const nextMessage = {\r\n            id: Date.now(),\r\n            text: this.state.message\r\n        }\r\n        this.setState({\r\n            message: '',\r\n            counter: this.state.counter + 1\r\n        })\r\n        var database = fire.database();\r\n        database.ref('Messages/' + nextMessage.id).set(nextMessage)\r\n        // var list = Object.assign([], this.state.messages);\r\n        // list.push(nextMessage);\r\n\r\n    }\r\n\r\n    render() {\r\n        const currenMessage = this.state.messages.map((message, i) => {\r\n            return (\r\n                <li key={message.id}>{message.text} </li>\r\n            )\r\n        })\r\n        return (\r\n            <div>\r\n                <ol>\r\n                    {currenMessage}\r\n                </ol>\r\n                <input type=\"text\" placeholder=\"message\" onChange={this.handleChange} value={this.state.message} />\r\n                <br></br>\r\n                <button type=\"button\" onClick={this.submitMessage}>Submit Message</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ChatRoom;","import React from 'react';\nimport './App.css';\nimport ChatRoom from './components/ChatRoom/chatroom';\n\nclass App extends React.Component {\n  render() {\n\n    return (\n      <div className=\"container\">\n        <ChatRoom />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}